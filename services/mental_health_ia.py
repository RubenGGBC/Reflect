# services/mental_health_ai.py
"""
üß†üíö Chat IA de Salud Mental - ReflectApp
Experto en salud mental que analiza entradas diarias y proporciona apoyo
"""

import os
import json
from dotenv import load_dotenv
import google.generativeai as genai

load_dotenv()

class MentalHealthAI:
    """IA especializada en salud mental para ReflectApp"""

    def __init__(self):
        # Configurar Gemini
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            raise ValueError("GEMINI_API_KEY no encontrada en .env")

        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')

        print("üß† Mental Health AI inicializada correctamente")

    def analyze_daily_entry(self, reflection_text, positive_tags, negative_tags, worth_it):
        """
        Analizar entrada diaria completa y generar respuesta de apoyo

        Args:
            reflection_text (str): Texto libre de reflexi√≥n
            positive_tags (list): Lista de momentos positivos
            negative_tags (list): Lista de momentos negativos
            worth_it (bool): Si el d√≠a mereci√≥ la pena

        Returns:
            str: Respuesta emp√°tica y anal√≠tica de la IA
        """

        print("üîç === ANALIZANDO ENTRADA DIARIA ===")
        print(f"üìù Reflexi√≥n: {reflection_text[:100]}...")
        print(f"‚ûï Tags positivos: {len(positive_tags)}")
        print(f"‚ûñ Tags negativos: {len(negative_tags)}")
        print(f"üí≠ Worth it: {worth_it}")

        try:
            # Crear prompt especializado
            prompt = self._create_mental_health_prompt(
                reflection_text, positive_tags, negative_tags, worth_it
            )

            print("ü§ñ Enviando consulta a Gemini...")

            # Generar respuesta
            response = self.model.generate_content(prompt)
            ai_response = response.text

            print("‚úÖ Respuesta recibida de Gemini")
            print(f"üìÑ Longitud de respuesta: {len(ai_response)} caracteres")

            return ai_response

        except Exception as e:
            print(f"‚ùå Error en an√°lisis de IA: {e}")
            return self._get_fallback_response()

    def _create_mental_health_prompt(self, reflection, positive_tags, negative_tags, worth_it):
        """Crear prompt especializado para an√°lisis de salud mental"""

        # Convertir tags a texto legible
        positive_text = self._tags_to_text(positive_tags, "positivos")
        negative_text = self._tags_to_text(negative_tags, "negativos")

        # Determinar estado del d√≠a
        worth_it_text = ""
        if worth_it is True:
            worth_it_text = "La persona siente que su d√≠a S√ç mereci√≥ la pena."
        elif worth_it is False:
            worth_it_text = "La persona siente que su d√≠a NO mereci√≥ la pena."
        else:
            worth_it_text = "La persona no ha decidido si su d√≠a mereci√≥ la pena."

        prompt = f"""
Eres un EXPERTO EN SALUD MENTAL con a√±os de experiencia ayudando a personas a procesar sus emociones y experiencias diarias. Tu rol es analizar la entrada de reflexi√≥n diaria de una persona y proporcionar apoyo emp√°tico, insights profundos y herramientas pr√°cticas.

INFORMACI√ìN DE HOY:

=== REFLEXI√ìN LIBRE ===
{reflection if reflection else "No hay reflexi√≥n escrita para hoy."}

=== MOMENTOS POSITIVOS ===
{positive_text}

=== MOMENTOS NEGATIVOS ===  
{negative_text}

=== EVALUACI√ìN DEL D√çA ===
{worth_it_text}

INSTRUCCIONES IMPORTANTES:
1. **S√â EMP√ÅTICO Y C√ÅLIDO**: Usa un tono comprensivo, nunca juzgues
2. **ANALIZA PROFUNDAMENTE**: Identifica patrones, emociones subyacentes, y conexiones entre diferentes aspectos
3. **PREGUNTA SI TIENES DUDAS**: Si algo no est√° claro o necesitas m√°s contexto, pregunta espec√≠ficamente
4. **PROPORCIONA HERRAMIENTAS**: Ofrece t√©cnicas pr√°cticas de bienestar mental cuando sea apropiado
5. **VALIDA LAS EMOCIONES**: Reconoce que todos los sentimientos son v√°lidos
6. **S√â ESPEC√çFICO**: Refi√©rete a elementos concretos de su d√≠a, no hables en generalidades

ESTRUCTURA DE TU RESPUESTA:
1. **Reconocimiento emp√°tico** de c√≥mo se sinti√≥ la persona
2. **An√°lisis profundo** de los patrones y temas que observas
3. **Validaci√≥n** de sus experiencias y emociones
4. **Herramientas o sugerencias** pr√°cticas si es apropiado
5. **Preguntas espec√≠ficas** si necesitas m√°s claridad sobre algo

EJEMPLO DE TONO:
"Veo que has tenido un d√≠a con altibajos interesantes. Me llama la atenci√≥n que..."

NO hagas:
- Diagn√≥sticos m√©dicos
- Recomendaciones de medicamentos
- Juicios sobre las decisiones de la persona
- Respuestas gen√©ricas o fr√≠as

RESPONDE EN ESPA√ëOL, con empat√≠a y profundidad profesional:
"""

        return prompt

    def _tags_to_text(self, tags, tipo):
        """Convertir lista de tags a texto legible"""
        if not tags:
            return f"No hay momentos {tipo} registrados para hoy."

        texto_tags = []
        for i, tag in enumerate(tags, 1):
            if hasattr(tag, 'name') and hasattr(tag, 'context'):
                # Es un objeto DynamicTag
                emoji = getattr(tag, 'emoji', '‚Ä¢')
                texto_tags.append(f"{i}. {emoji} {tag.name}: {tag.context}")
            elif isinstance(tag, dict):
                # Es un diccionario
                emoji = tag.get('emoji', '‚Ä¢')
                name = tag.get('name', 'Sin nombre')
                context = tag.get('context', 'Sin contexto')
                texto_tags.append(f"{i}. {emoji} {name}: {context}")
            else:
                # Es otra cosa, convertir a string
                texto_tags.append(f"{i}. {str(tag)}")

        return "\n".join(texto_tags)

    def _get_fallback_response(self):
        """Respuesta de respaldo en caso de error"""
        return """üå∏ Me disculpo, pero he tenido una dificultad t√©cnica analizando tu d√≠a. 
        
Sin embargo, quiero que sepas que el simple hecho de que hayas tomado tiempo para reflexionar sobre tu d√≠a es valioso. La autoobservaci√≥n es el primer paso hacia el bienestar emocional.

¬øTe gustar√≠a contarme algo espec√≠fico sobre c√≥mo te has sentido hoy? Estoy aqu√≠ para escucharte.

üíö Recuerda: cada d√≠a es una oportunidad de crecimiento, y tus sentimientos siempre son v√°lidos."""

    def continue_conversation(self, previous_context, user_message):
        """
        Continuar conversaci√≥n con contexto previo

        Args:
            previous_context (str): Contexto de la conversaci√≥n anterior
            user_message (str): Nuevo mensaje del usuario

        Returns:
            str: Respuesta de seguimiento de la IA
        """

        print("üí¨ === CONTINUANDO CONVERSACI√ìN ===")
        print(f"üí≠ Mensaje del usuario: {user_message}")

        try:
            prompt = f"""
Eres un experto en salud mental continuando una conversaci√≥n con una persona sobre su d√≠a.

CONTEXTO PREVIO:
{previous_context}

NUEVO MENSAJE DE LA PERSONA:
{user_message}

Responde de manera emp√°tica, profunda y personalizada. Haz referencia al contexto previo y proporciona apoyo espec√≠fico basado en lo que la persona acaba de compartir.

Si es apropiado, puedes:
- Hacer preguntas de seguimiento
- Ofrecer t√©cnicas de bienestar espec√≠ficas
- Validar sus emociones
- Ayudar a procesar lo que est√° sintiendo

Mant√©n un tono c√°lido y profesional. Responde en espa√±ol:
"""

            response = self.model.generate_content(prompt)
            return response.text

        except Exception as e:
            print(f"‚ùå Error en conversaci√≥n continua: {e}")
            return "Me disculpo, pero he tenido una dificultad t√©cnica. ¬øPodr√≠as repetir lo que me quer√≠as decir? Estoy aqu√≠ para escucharte."

# Funci√≥n principal para usar desde otros m√≥dulos
def analyze_daily_entry_with_ai(reflection_text, positive_tags, negative_tags, worth_it):
    """
    Funci√≥n helper para analizar entrada diaria con IA

    Returns:
        str: An√°lisis de salud mental de la IA
    """
    try:
        ai = MentalHealthAI()
        return ai.analyze_daily_entry(reflection_text, positive_tags, negative_tags, worth_it)
    except Exception as e:
        print(f"‚ùå Error creando MentalHealthAI: {e}")
        return "Lo siento, el servicio de IA no est√° disponible en este momento. Tu reflexi√≥n es igualmente valiosa. üíö"

# Funci√≥n para continuar conversaci√≥n
def continue_ai_conversation(previous_context, user_message):
    """
    Funci√≥n helper para continuar conversaci√≥n con IA

    Returns:
        str: Respuesta de seguimiento de la IA
    """
    try:
        ai = MentalHealthAI()
        return ai.continue_conversation(previous_context, user_message)
    except Exception as e:
        print(f"‚ùå Error en conversaci√≥n de IA: {e}")
        return "Me disculpo por la dificultad t√©cnica. ¬øPodr√≠as repetir tu mensaje? üíö"